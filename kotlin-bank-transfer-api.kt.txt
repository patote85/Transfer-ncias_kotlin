// .devcontainer/devcontainer.json
{
  "name": "Kotlin Bank Transfer API",
  "dockerComposeFile": "../docker-compose.yml",
  "service": "app",
  "workspaceFolder": "/workspace",
  "settings": {
    "terminal.integrated.shell.linux": "/bin/bash"
  },
  "extensions": [
    "vscjava.vscode-java-pack",
    "fwcd.kotlin",
    "redhat.vscode-yaml"
  ],
  "forwardPorts": [8080],
  "postCreateCommand": "./gradlew build",
  "remoteUser": "vscode"
}

// docker-compose.yml (atualizado)
version: '3.8'

services:
  app:
    build: 
      context: .
      dockerfile: Dockerfile
    volumes:
      - .:/workspace:cached
    command: sleep infinity
    ports:
      - "8080:8080"
    environment:
      - SPRING_DATA_MONGODB_URI=mongodb://mongodb:27017/banktransfer
    depends_on:
      - mongodb

  mongodb:
    image: mongo:4.4
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db

volumes:
  mongodb_data:

// Dockerfile (atualizado)
FROM mcr.microsoft.com/vscode/devcontainers/java:11

# Instalar o Kotlin
RUN curl -s https://get.sdkman.io | bash \
    && bash -c ". /root/.sdkman/bin/sdkman-init.sh \
    && sdk install kotlin"

# Copiar o wrapper do Gradle e os arquivos de configuração
COPY gradle gradle
COPY build.gradle.kts settings.gradle.kts gradlew ./

# Verificar e instalar dependências
RUN ./gradlew --version

# Copiar o código-fonte
COPY src src

# Definir o diretório de trabalho
WORKDIR /workspace

// build.gradle.kts (atualizado)
import org.jetbrains.kotlin.gradle.tasks.KotlinCompile

plugins {
    id("org.springframework.boot") version "2.6.3"
    id("io.spring.dependency-management") version "1.0.11.RELEASE"
    kotlin("jvm") version "1.6.10"
    kotlin("plugin.spring") version "1.6.10"
}

group = "com.example"
version = "0.0.1-SNAPSHOT"
java.sourceCompatibility = JavaVersion.VERSION_11

repositories {
    mavenCentral()
}

dependencies {
    implementation("org.springframework.boot:spring-boot-starter-web")
    implementation("org.springframework.boot:spring-boot-starter-data-mongodb")
    implementation("com.fasterxml.jackson.module:jackson-module-kotlin")
    implementation("org.jetbrains.kotlin:kotlin-reflect")
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
    testImplementation("org.springframework.boot:spring-boot-starter-test")
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")
    testImplementation("io.mockk:mockk:1.12.0")
}

tasks.withType<KotlinCompile> {
    kotlinOptions {
        freeCompilerArgs = listOf("-Xjsr305=strict")
        jvmTarget = "11"
    }
}

tasks.withType<Test> {
    useJUnitPlatform()
}

// src/main/resources/application.properties (sem alterações)
spring.data.mongodb.uri=${SPRING_DATA_MONGODB_URI:mongodb://localhost:27017/banktransfer}

// README.md
# Kotlin Bank Transfer API

Este projeto é uma API de transferência bancária desenvolvida em Kotlin com Spring Boot.

## Executando no GitHub Codespaces

1. Abra o projeto no GitHub Codespaces.
2. O Codespace será criado com todas as dependências necessárias.
3. Quando o Codespace estiver pronto, abra um novo terminal.
4. Execute o seguinte comando para iniciar a aplicação:

   ```
   ./gradlew bootRun
   ```

5. A API estará disponível em `https://&lt;seu-codespace-url&gt;:8080`.

## Testando a API

Use a collection do Postman/Insomnia fornecida para testar os endpoints da API. Lembre-se de substituir `http://localhost:8080` pela URL do seu Codespace.

## Estrutura do Projeto

- `src/main/kotlin`: Código-fonte da aplicação
- `src/test/kotlin`: Testes unitários
- `docker-compose.yml`: Configuração do Docker Compose
- `.devcontainer`: Configurações do GitHub Codespaces

## Notas

- O MongoDB está configurado para rodar em um container separado.
- Os dados do MongoDB são persistidos em um volume Docker.
- Para acessar o shell do MongoDB, use:

  ```
  docker-compose exec mongodb mongo
  ```

Aproveite o desenvolvimento!
